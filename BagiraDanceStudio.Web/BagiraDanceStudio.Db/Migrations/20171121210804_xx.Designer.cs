// <auto-generated />
using BagiraDanceStudio.Db.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BagiraDanceStudio.Db.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20171121210804_xx")]
    partial class xx
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.BillingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("BillingTime");

                    b.Property<string>("Description");

                    b.Property<Guid?>("UserIdId");

                    b.HasKey("Id");

                    b.HasIndex("UserIdId")
                        .IsUnique()
                        .HasFilter("[UserIdId] IS NOT NULL");

                    b.ToTable("BillingHistories");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EventToImageId");

                    b.Property<string>("HtmlDescription");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("EventToImageId")
                        .IsUnique()
                        .HasFilter("[EventToImageId] IS NOT NULL");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.EventToImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ImageId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("EventToImages");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte[]>("Data");

                    b.Property<string>("Description");

                    b.Property<Guid?>("TagIdId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TagIdId")
                        .IsUnique()
                        .HasFilter("[TagIdId] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ContractDate");

                    b.Property<Guid?>("PersonDataId");

                    b.Property<decimal>("Salary");

                    b.HasKey("Id");

                    b.HasIndex("PersonDataId")
                        .IsUnique()
                        .HasFilter("[PersonDataId] IS NOT NULL");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.PersonData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformaion");

                    b.Property<string>("Email");

                    b.Property<string>("FName");

                    b.Property<string>("HashedPassword");

                    b.Property<string>("LName");

                    b.Property<string>("Login");

                    b.Property<string>("Phone");

                    b.Property<byte[]>("Photo");

                    b.Property<Guid?>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PersonsData");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.ScheduleAssigned", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AssignedTime");

                    b.Property<Guid?>("SheduleAvailableId");

                    b.Property<string>("Status");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SheduleAvailableId");

                    b.HasIndex("UserId");

                    b.ToTable("SchedulesAssigned");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.ScheduleAvailable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Duration");

                    b.Property<Guid?>("InstructorId");

                    b.Property<Guid?>("LevelId");

                    b.Property<int>("MaxUsers");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LevelId");

                    b.ToTable("SchedulesAvailable");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<Guid?>("LevelId");

                    b.Property<Guid?>("ManagerId");

                    b.Property<Guid?>("PersonDataId");

                    b.Property<long>("TrainingPoints");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PersonDataId")
                        .IsUnique()
                        .HasFilter("[PersonDataId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.BillingHistory", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.User", "UserId")
                        .WithOne("BillingHistory")
                        .HasForeignKey("BagiraDanceStudio.Db.Models.BillingHistory", "UserIdId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Event", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.EventToImage", "EventToImage")
                        .WithOne("Event")
                        .HasForeignKey("BagiraDanceStudio.Db.Models.Event", "EventToImageId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.EventToImage", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.Image", "Image")
                        .WithOne("EventToImage")
                        .HasForeignKey("BagiraDanceStudio.Db.Models.EventToImage", "ImageId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Image", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.Tag", "TagId")
                        .WithOne("Image")
                        .HasForeignKey("BagiraDanceStudio.Db.Models.Image", "TagIdId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.Manager", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.PersonData", "PersonData")
                        .WithOne("Manager")
                        .HasForeignKey("BagiraDanceStudio.Db.Models.Manager", "PersonDataId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.PersonData", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.Role", "Role")
                        .WithMany("PersonalsData")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.ScheduleAssigned", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.ScheduleAvailable", "SheduleAvailable")
                        .WithMany("SchedulesAssigned")
                        .HasForeignKey("SheduleAvailableId");

                    b.HasOne("BagiraDanceStudio.Db.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.ScheduleAvailable", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.PersonData", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("BagiraDanceStudio.Db.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");
                });

            modelBuilder.Entity("BagiraDanceStudio.Db.Models.User", b =>
                {
                    b.HasOne("BagiraDanceStudio.Db.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("BagiraDanceStudio.Db.Models.Manager", "Manager")
                        .WithMany("Users")
                        .HasForeignKey("ManagerId");

                    b.HasOne("BagiraDanceStudio.Db.Models.PersonData", "PersonData")
                        .WithOne("User")
                        .HasForeignKey("BagiraDanceStudio.Db.Models.User", "PersonDataId");
                });
#pragma warning restore 612, 618
        }
    }
}
